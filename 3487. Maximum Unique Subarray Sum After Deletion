3487. Maximum Unique Subarray Sum After Deletion

You are given an integer array nums.

You are allowed to delete any number of elements from nums without making it empty. After performing the deletions, select a subarray of nums such that:

All elements in the subarray are unique.
The sum of the elements in the subarray is maximized.
Return the maximum sum of such a subarray.

 

Example 1:

Input: nums = [1,2,3,4,5]

Output: 15

Explanation:

Select the entire array without deleting any element to obtain the maximum sum.

Example 2:

Input: nums = [1,1,0,1,1]

Output: 1

Explanation:

Delete the element nums[0] == 1, nums[1] == 1, nums[2] == 0, and nums[3] == 1. Select the entire array [1] to obtain the maximum sum.

Example 3:

Input: nums = [1,2,-1,-2,1,0,-1]

Output: 3

Explanation:

Delete the elements nums[2] == -1 and nums[3] == -2, and select the subarray [2, 1] from [1, 2, 1, 0, -1] to obtain the maximum sum.

 

Constraints:

1 <= nums.length <= 100
-100 <= nums[i] <= 100
===================================================
import java.util.*;

class Solution {
    public int maxSum(int[] nums) {
        //fast();
        int temp = Arrays.stream(nums).max().orElse(Integer.MIN_VALUE);
        if (temp < 0) {
            return temp;
        }
        Set<Integer> set = new HashSet<>();
        for (int num : nums) {
            if (num >= 0) {
                set.add(num);
            }
        }
        return set.stream().mapToInt(Integer::intValue).sum();
    }
}
=============================================================================
import java.util.*;

class Solution {
    public int maxSum(int[] nums) {
        Arrays.sort(nums); // Sorting the array
        int ans = nums[nums.length - 1]; // Start with the maximum element
        Map<Integer, Integer> mp = new HashMap<>();
        mp.put(nums[nums.length - 1], 1);

        for (int num : nums) {
            if (num <= 0) continue; // Skip negative numbers
            if (mp.containsKey(num)) continue; // Skip duplicates
            ans += num;
            mp.put(num, 1);
        }
        return ans;
    }
}
=======================================================================
class Solution{

public int maxSum(int[] nums){
	if (isAllNegative(nums)){
		return max(nums);
	}

	int sum = 0;

	var numSet = new HashSet<Integer>();
	for (int num : nums){
		if (num > 0 && !numSet.contains(num)){
			numSet.add(num);
			sum += num;
		}
	}

	return sum;
}

private boolean isAllNegative(int[] nums){
	for (int num : nums){
		if (!( num < 0 )){
			return false;
		}
	}
	return true;
}

private int max(int[] nums){
	int maxVal = nums[0];
	for (int i = 1; i < nums.length; i += 1){
		if (nums[i] > maxVal){
			maxVal = nums[i];
		}
	}
	return maxVal;
}

}
