import java.util.Arrays;

public class BellmanFord {
    public static void bellmanFord(int[][] a, int src) {
      int V = a.length;
        int[] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[src] = 0;
        int c=0;
        while(c<V-1) //Relax all edges V-1 times
        {  
            for (int u = 0; u < V; u++) 
            {
                for (int v = 0; v < V; v++) 
                {
                    if (a[u][v] != 0 && dist[u] != Integer.MAX_VALUE && dist[u] + a[u][v] < dist[v]) {
                        dist[v] = dist[u] + a[u][v];
                    }
                }
            }
            c++;
        }
        //negative
        for (int u = 0; u < V; u++) {
            for (int v = 0; v < V; v++) {
                if (a[u][v] != 0 && dist[u] != Integer.MAX_VALUE && dist[u] + a[u][v] < dist[v]) {
                    System.out.println("Graph contains negative weight cycle");
                    return;
                }
            }
        }
        
        
        for (int i = 0; i < V; i++) {
            System.out.println(src +"->"+ i + " = " + dist[i]);
        }
        
    }
    public static void main(String[] args) {
        Scanner z = new Scanner(System.in);
        int v = z.nextInt();
        int e = z.nextInt();
        int[][] a = new int[v][v];
        for(int i=0;i<e;i++)
        {
            int v1 = z.nextInt();
            int v2 = z.nextInt();
            int w = z.nextInt();
            a[v1][v2] = w;
        }
        bellmanFord(a, 0);  
    }
}
====================================input====================================================
5
8
0 1 -1
0 2 4
1 2 3
1 3 2
1 4 2
3 1 1
3 2 5
4 3 -3
======================================output====================================================
0->0 = 0
0->1 = -1
0->2 = 2
0->3 = -2
0->4 = 1
