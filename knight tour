
import java.util.Scanner;

public class knighttour {
  static int xMove[] = { 2, 1, -1, -2, -2, -1, 1, 2 };
  static int yMove[] = {1, 2, 2, 1, -1, -2, -2, -1 };
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    int n=sc.nextInt();
    int a[][]=new int[n][n];
  
    boolean used[][]=new boolean[n][n];
    solve(a,0,0,1,n,used);
    
    
  }
  public static void display(int[][] a,int n){
    for(int i=0;i<n;i++){
      for(int j=0;j<n;j++){
        System.out.print(a[i][j]+" ");
      }

      System.out.println();

    }
    System.out.println();
  }


  public static  void solve(int[][] a,int row,int col,int count,int n,boolean[][] used){
    if(count==n*n)
    {
      for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
          System.out.print(a[i][j]+" ");
        }

        System.out.println();
      }
      System.exit(0);
      System.out.println();
    }
    else{
      for(int k=0;k<8;k++){
        if(issafe(a,row+xMove[k],col+yMove[k],count,n,used)){
          used[row+xMove[k]][col+yMove[k]]=true;
          a[row+xMove[k]][col+yMove[k]]=count;
          solve(a,row+xMove[k],col+yMove[k],count+1,n,used);
          used[row+xMove[k]][col+yMove[k]]=false;
          a[row+xMove[k]][col+yMove[k]]=0;
        }
      }  
  }
  }
  public static boolean issafe(int[][] a,int x,int y,int count,int n,boolean[][] used){
    if(x==0&&y==0) return false;

    if(x<0||x>=n||y<0||y>=n)
    return false;
    if(used[x][y])
    return false;

    return true;
  }  

}
