public class Solution {

  public static void dijkstra(int a[][], int s) {
    int len = a.length;
    boolean[] vis = new boolean[len];
    int[] distance = new int[len];
    for (int i = 0; i < len; i++) {
      vis[i] = false;
      distance[i] = Integer.MAX_VALUE ;
    }

    distance[s] = 0;
    for (int i = 0; i < len; i++) { 

      int u = findMinDistance(distance, vis);   
      vis[u] = true;


      for (int v = 0; v < len; v++) {
        if (!vis[v] && a[u][v] != 0 && (distance[u] + a[u][v] < distance[v])) {
          distance[v] = distance[u] + a[u][v];
        }
      }
    }
    for (int i = 0; i < distance.length; i++) {
      System.out.println(String.format("Distance from %s to %s is %s", s, i, distance[i]));
    }

  }

  private static int findMinDistance(int[] distance, boolean[] vis) {
    int minDistance = Integer.MAX_VALUE;
    int minDistanceVertex = -1;
    for (int i = 0; i < distance.length; i++) {
      if (!vis[i] && distance[i] < minDistance) {
        minDistance = distance[i];
        minDistanceVertex = i;
      }
    }
    return minDistanceVertex;
  }

  public static void main(String[] args) {
      Scanner z = new Scanner(System.in);
      int v = z.nextInt();
      int e = z.nextInt();
      int a[][] = new int[v][v]; 
      for(int i=0;i<e;i++)
      {
          int v1 = z.nextInt();
          int v2 = z.nextInt();
          int w = z.nextInt();
          a[v1][v2]=w;
          a[v2][v1]=w;
      }
      dijkstra(a, 0);
  }
}                   
=======================================Input for the above Program========================================================
7
18
0 2 1
0 3 2
1 2 2
1 5 3
2 0 1
2 1 2
2 3 1
2 4 3
3 0 2
3 2 1
3 6 1
4 2 3
4 5 2
5 1 3
5 4 2
5 6 1
5 3 1
5 5 1
--------output-------------
Distance from 0 to 0 is 0
Distance from 0 to 1 is 3
Distance from 0 to 2 is 1
Distance from 0 to 3 is 2
Distance from 0 to 4 is 4
Distance from 0 to 5 is 3
Distance from 0 to 6 is 3
----------------------
0, 0, 1, 2, 0, 0, 0 
0, 0, 2, 0, 0, 3, 0 
1, 2, 0, 1, 3, 0, 0 
2, 0, 1, 0, 0, 0, 1 
0, 0, 3, 0, 0, 2, 0 
0, 3, 0, 0, 2, 0, 1 
0, 0, 0, 1, 0, 1, 0 
===============================================================================================

public class Dijkstra {

  public static void dijkstra(int[][] graph, int source) {
    int count = graph.length;
    boolean[] visitedVertex = new boolean[count];
    int[] distance = new int[count];
    for (int i = 0; i < count; i++) {
      visitedVertex[i] = false;
      distance[i] = Integer.MAX_VALUE ;
    }

    distance[source] = 0;
    for (int i = 0; i < count; i++) { 

      int u = findMinDistance(distance, visitedVertex);   
      visitedVertex[u] = true;


      for (int v = 0; v < count; v++) {
        if (!visitedVertex[v] && graph[u][v] != 0 && (distance[u] + graph[u][v] < distance[v])) {
          distance[v] = distance[u] + graph[u][v];
        }
      }
    }
    for (int i = 0; i < distance.length; i++) {
      System.out.println(String.format("Distance from %s to %s is %s", source, i, distance[i]));
    }

  }

  private static int findMinDistance(int[] distance, boolean[] visitedVertex) {
    int minDistance = Integer.MAX_VALUE;
    int minDistanceVertex = -1;
    for (int i = 0; i < distance.length; i++) {
      if (!visitedVertex[i] && distance[i] < minDistance) {
        minDistance = distance[i];
        minDistanceVertex = i;
      }
    }
    return minDistanceVertex;
  }

  public static void main(String[] args) {
    int graph[][] = new int[][] { { 0, 0, 1, 2, 0, 0, 0 }, { 0, 0, 2, 0, 0, 3, 0 }, { 1, 2, 0, 1, 3, 0, 0 },
        { 2, 0, 1, 0, 0, 0, 1 }, { 0, 0, 3, 0, 0, 2, 0 }, { 0, 3, 0, 0, 2, 0, 1 }, { 0, 0, 0, 1, 0, 1, 0 } };
    Dijkstra T = new Dijkstra();
    T.dijkstra(graph, 0);
  }
}                   
