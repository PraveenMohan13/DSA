
import java.util.Arrays;
class PGraph {

  public void Prim(int G[][], int V) {

    int INF = 9999999;

    int no_edge; 
    boolean[] selected = new boolean[V];
    Arrays.fill(selected, false);
    no_edge = 0;
    selected[0] = true;
    System.out.println("Edge : Weight");

    while (no_edge < V - 1) {
      

      int min = INF;
;      int x = 0; 
      int y = 0; 

      for (int i = 0; i < V; i++) {
        if (selected[i] == true) {
          for (int j = 0; j < V; j++) {
            if (!selected[j] && G[i][j] != 0) {
              if (min > G[i][j]) {
                min = G[i][j];
                x = i;
                y = j;
              }
            }
          }
        }
      }
      System.out.println(x + " - " + y + " :  " + G[x][y]);
      selected[y] = true;
      no_edge++;
    }
  }

  public static void main(String[] args) {
    PGraph g = new PGraph();
    int V = 5;
    int[][] G = { { 0, 9, 75, 0, 0 }, { 9, 0, 95, 19, 42 }, { 75, 95, 0, 51, 66 }, { 0, 19, 51, 0, 31 },
        { 0, 42, 66, 31, 0 } };

    g.Prim(G, V);
  }
}
===============================================================================
import java.util.Arrays;
class PGraph {

  static void Prim(int G[][], int V) {

    int INF = Integer.MAX_VALUE;

    int no_edge; 
    boolean[] selected = new boolean[V];
    Arrays.fill(selected, false);
    no_edge = 0;
    selected[0] = true;
    System.out.println("Edge : Weight");

    while (no_edge < V - 1) {
      

      int min = INF;
;      int x = 0; 
      int y = 0; 

      for (int i = 0; i < V; i++) {
        if (selected[i] == true) {
          for (int j = 0; j < V; j++) {
            if (!selected[j] && G[i][j] != 0) {
              if (min > G[i][j]) {
                min = G[i][j];
                x = i;
                y = j;
              }
            }
          }
        }
      }
      System.out.println(x + " - " + y + " :  " + G[x][y]);
      selected[y] = true;
      no_edge++;
    }
  }

   public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        int V = s.nextInt();
        int E = s.nextInt();
        int [][]a = new int[V][V];
        for(int i=0;i<E;i++){
            int v1 = s.nextInt();
            int v2 = s.nextInt();
            int weight = s.nextInt();
            a[v1][v2] = weight;
            // a[v2][v1] = weight;
        }
    Prim(a, V);
  }
}
// 5
// 16
// 0 1 9
// 0 2 75
// 1 0 9
// 1 2 95
// 1 3 19
// 1 4 42
// 2 0 75
// 2 1 95
// 2 3 51
// 2 4 66
// 3 1 19
// 3 2 51
// 3 4 31
// 4 1 42
// 4 2 66
// 4 3 31
---------------------------------------------------------------------------------------------------------------------------------------
import java.io.*;
import java.util.*;

public class Solution {
    
    public static void primsAlgo(int[][] adjacency){
        int v = adjacency.length;
        boolean[] visited = new boolean[v];
        int weight[] = new int[v];
        int parent[] = new int[v];
        
        weight[0] = 0;
        parent[0] = -1;
        for(int i=1;i<v;i++){
            weight[i] = Integer.MAX_VALUE;
        }
        
        for(int i=0;i<v;i++){
            int minVertex = findminVertex(weight, visited);
            visited[minVertex] = true;
            
            for(int j=0;j<v;j++){
                if(adjacency[minVertex][j] != 0 && !visited[j]){
                    if(adjacency[minVertex][j] < weight[j]){
                        weight[j] = adjacency[minVertex][j];
                        parent[j] = minVertex;
                    }
                }
            }
        }
        
        
        for(int i=1;i<v;i++){
            if(parent[i] < i){
                System.out.println(parent[i] + " " + i + " " + weight[i]);
            }else{
                System.out.println(i + " " +parent[i] + " " + weight[i]);
            }
        }
    }

    
    public static int findminVertex(int[] weight, boolean[] visited){
        int minVertex = -1;
        for(int i=0;i<weight.length;i++){
            if(!visited[i] && (minVertex == -1 || weight[i] < weight[minVertex])){
                minVertex = i;
            }
        }
        return minVertex;
    }
    
    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        int V = s.nextInt();
        int E = s.nextInt();
        int [][]adjacency = new int[V][V];
        for(int i=0;i<E;i++){
            int v1 = s.nextInt();
            int v2 = s.nextInt();
            int weight = s.nextInt();
            adjacency[v1][v2] = weight;
            adjacency[v2][v1] = weight;
        }
        primsAlgo(adjacency);
    }
}
