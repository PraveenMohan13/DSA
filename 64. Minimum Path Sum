Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

 

Example 1:


Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.
Example 2:

Input: grid = [[1,2,3],[4,5,6]]
Output: 12
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 200
0 <= grid[i][j] <= 200
------------------------------------------------------------------------------------------------

class Solution {
    public int minPathSum(int[][] grid) {
        int[][] dp = new int[grid.length][grid[0].length];
        dp[0][0] = grid[0][0];
        int t1=0,t2=0;
        for(int i = 0; i < grid.length; i++) {
            for(int j = 0; j < grid[0].length; j++) {
                if(i == 0 && j == 0) continue;
                 t1 = Integer.MAX_VALUE;
                 if(j-1 >= 0) t1 = dp[i][j-1] + grid[i][j];
                 t2 = Integer.MAX_VALUE;
                 if(i-1 >= 0) t2 = dp[i-1][j] + grid[i][j];
                 dp[i][j] = Math.min(t1,t2);
            }
        }
        return dp[dp.length - 1][dp[0].length - 1];
    }
}
==================================================================================================
class Solution:
    def minPathSum(self, grid):
        rows, cols = len(grid), len(grid[0])
        dp = [[0] * cols for _ in range(rows)]
        dp[0][0] = grid[0][0]

        for i in range(rows):
            for j in range(cols):
                if i == 0 and j == 0:
                    continue
                
                t1 = float('inf') if j - 1 < 0 else dp[i][j - 1] + grid[i][j]
                t2 = float('inf') if i - 1 < 0 else dp[i - 1][j] + grid[i][j]
                
                dp[i][j] = min(t1, t2)

        return dp[rows - 1][cols - 1]
